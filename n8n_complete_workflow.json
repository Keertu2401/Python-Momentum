{
  "name": "Complete Momentum Strategy Rebalancing",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * 1"
            }
          ]
        }
      },
      "id": "cron-schedule",
      "name": "Weekly Schedule (Monday 9 AM)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8000/run",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "capital",
                "value": "={{ $workflow.settings.capital || 500000 }}"
              },
              {
                "name": "top_n",
                "value": "={{ $workflow.settings.top_n || 15 }}"
              },
              {
                "name": "price_cap",
                "value": "={{ $workflow.settings.price_cap || 3000 }}"
              }
            ]
          },
          "timeout": 60000
        }
      },
      "id": "momentum-api",
      "name": "Get Momentum Strategy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.top.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-results",
      "name": "Check Strategy Results",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Get current holdings from broker/database\n// This is a placeholder - replace with actual broker API call\nconst currentHoldings = [\n  { ticker: \"RELIANCE.NS\", quantity: 10, marketValue: 13849 },\n  { ticker: \"TCS.NS\", quantity: 5, marketValue: 18500 },\n  { ticker: \"INFY.NS\", quantity: 8, marketValue: 14400 }\n];\n\nreturn [{ json: { holdings: currentHoldings } }];"
      },
      "id": "get-current-holdings",
      "name": "Get Current Holdings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 480]
    },
    {
      "parameters": {
        "jsCode": "// Portfolio Rebalancing Logic\nconst strategyData = $input.all()[0].json;\nconst currentHoldings = $input.all()[1].json.holdings;\n\nconst targetPortfolio = strategyData.top || [];\nconst summary = strategyData.summary || {};\n\n// Create maps for easier lookup\nconst currentMap = new Map();\ncurrentHoldings.forEach(holding => {\n  currentMap.set(holding.ticker, {\n    currentQty: holding.quantity || 0,\n    currentValue: holding.marketValue || 0\n  });\n});\n\nconst rebalanceOrders = [];\nconst timestamp = new Date().toISOString();\n\n// Generate buy/sell orders for target portfolio\ntargetPortfolio.forEach(target => {\n  const ticker = target.Ticker;\n  const targetQty = target.Qty || 0;\n  const current = currentMap.get(ticker) || { currentQty: 0, currentValue: 0 };\n  const qtyDiff = targetQty - current.currentQty;\n  \n  if (Math.abs(qtyDiff) > 0) {\n    rebalanceOrders.push({\n      ticker: ticker,\n      action: qtyDiff > 0 ? 'BUY' : 'SELL',\n      quantity: Math.abs(qtyDiff),\n      targetQty: targetQty,\n      currentQty: current.currentQty,\n      currentPrice: target.Price || 0,\n      estimatedValue: Math.abs(qtyDiff) * (target.Price || 0),\n      priority: target.Rank || 999,\n      momentumScore: target.MomentumScore || 0,\n      allocation: target['Allocation(%)'] || 0,\n      orderType: 'MARKET',\n      validity: 'DAY',\n      product: 'CNC'\n    });\n  }\n  \n  // Remove from current map (processed)\n  currentMap.delete(ticker);\n});\n\n// Handle positions to exit (not in target portfolio)\ncurrentMap.forEach((current, ticker) => {\n  if (current.currentQty > 0) {\n    rebalanceOrders.push({\n      ticker: ticker,\n      action: 'SELL',\n      quantity: current.currentQty,\n      targetQty: 0,\n      currentQty: current.currentQty,\n      estimatedValue: current.currentValue,\n      priority: 1, // High priority for exits\n      reason: 'EXIT_POSITION',\n      orderType: 'MARKET',\n      validity: 'DAY',\n      product: 'CNC'\n    });\n  }\n});\n\n// Sort orders: Sells first, then buys by priority\nrebalanceOrders.sort((a, b) => {\n  if (a.action === 'SELL' && b.action === 'BUY') return -1;\n  if (a.action === 'BUY' && b.action === 'SELL') return 1;\n  return a.priority - b.priority;\n});\n\n// Calculate rebalancing metrics\nconst totalOrderValue = rebalanceOrders.reduce((sum, order) => \n  sum + (order.estimatedValue || 0), 0);\n\nconst buyOrders = rebalanceOrders.filter(o => o.action === 'BUY');\nconst sellOrders = rebalanceOrders.filter(o => o.action === 'SELL');\n\nconst rebalanceResult = {\n  timestamp: timestamp,\n  date: timestamp.split('T')[0],\n  strategy: {\n    totalCapital: summary.total_capital || 0,\n    investedAmount: summary.invested_amount || 0,\n    utilization: summary.utilization_pct || 0,\n    selectedStocks: summary.selected_stocks || 0,\n    eligibleStocks: summary.eligible_stocks || 0,\n    avgMomentumScore: summary.avg_momentum_score || 0\n  },\n  rebalancing: {\n    totalOrders: rebalanceOrders.length,\n    buyOrders: buyOrders.length,\n    sellOrders: sellOrders.length,\n    totalOrderValue: totalOrderValue,\n    buyValue: buyOrders.reduce((sum, o) => sum + (o.estimatedValue || 0), 0),\n    sellValue: sellOrders.reduce((sum, o) => sum + (o.estimatedValue || 0), 0)\n  },\n  orders: rebalanceOrders,\n  targetPortfolio: targetPortfolio,\n  currentHoldings: currentHoldings\n};\n\nreturn [{ json: rebalanceResult }];"
      },
      "id": "generate-rebalance",
      "name": "Generate Rebalance Orders",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.rebalancing.totalOrders }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],\n          \"combinator\": \"and\"\n        }\n      },\n      \"id\": \"check-orders\",\n      \"name\": \"Check if Orders Needed\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2,\n      \"position\": [1120, 300]\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Market Hours and Risk Validation\\nconst orders = $input.all()[0].json.orders;\\nconst strategy = $input.all()[0].json.strategy;\\n\\n// Check market hours (IST)\\nconst now = new Date();\\nconst istTime = new Date(now.toLocaleString(\\\"en-US\\\", {timeZone: \\\"Asia/Kolkata\\\"}));\\nconst hour = istTime.getHours();\\nconst day = istTime.getDay();\\nconst minute = istTime.getMinutes();\\n\\nconst isMarketOpen = (\\n  day >= 1 && day <= 5 && // Monday to Friday\\n  ((hour === 9 && minute >= 15) || (hour > 9 && hour < 15) || (hour === 15 && minute <= 30))\\n);\\n\\nconst validationResult = {\\n  marketOpen: isMarketOpen,\\n  currentTime: istTime.toISOString(),\\n  validatedOrders: [],\\n  rejectedOrders: [],\\n  warnings: []\\n};\\n\\nif (!isMarketOpen) {\\n  validationResult.warnings.push('Market is closed. Orders will be queued for next session.');\\n}\\n\\n// Risk validation\\nconst maxPositionSize = 0.15; // 15% max per position\\nconst totalCapital = strategy.totalCapital;\\n\\norders.forEach(order => {\\n  const positionSize = (order.estimatedValue || 0) / totalCapital;\\n  \\n  if (positionSize > maxPositionSize) {\\n    validationResult.rejectedOrders.push({\\n      ...order,\\n      rejectionReason: `Position size too large: ${(positionSize * 100).toFixed(2)}%`\\n    });\\n    validationResult.warnings.push(`Rejected ${order.ticker}: Position size ${(positionSize * 100).toFixed(2)}% exceeds limit`);\\n  } else {\\n    validationResult.validatedOrders.push(order);\\n  }\\n});\\n\\nreturn [{ json: { ...validationResult, originalData: $input.all()[0].json } }];\"\n      },\n      \"id\": \"validate-orders\",\n      \"name\": \"Validate Orders & Market Hours\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [1340, 300]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"appendOrUpdate\",\n        \"documentId\": \"{{ $workflow.settings.googleSheetId }}\",\n        \"sheetName\": \"Rebalancing_Log\",\n        \"columns\": {\n          \"mappingMode\": \"defineBelow\",\n          \"value\": {\n            \"Timestamp\": \"={{ $json.originalData.timestamp }}\",\n            \"Date\": \"={{ $json.originalData.date }}\",\n            \"Total_Orders\": \"={{ $json.originalData.rebalancing.totalOrders }}\",\n            \"Buy_Orders\": \"={{ $json.originalData.rebalancing.buyOrders }}\",\n            \"Sell_Orders\": \"={{ $json.originalData.rebalancing.sellOrders }}\",\n            \"Total_Order_Value\": \"={{ $json.originalData.rebalancing.totalOrderValue }}\",\n            \"Total_Capital\": \"={{ $json.originalData.strategy.totalCapital }}\",\n            \"Utilization_Pct\": \"={{ $json.originalData.strategy.utilization }}\",\n            \"Avg_Momentum_Score\": \"={{ $json.originalData.strategy.avgMomentumScore }}\",\n            \"Market_Open\": \"={{ $json.marketOpen }}\",\n            \"Validated_Orders\": \"={{ $json.validatedOrders.length }}\",\n            \"Rejected_Orders\": \"={{ $json.rejectedOrders.length }}\",\n            \"Warnings\": \"={{ $json.warnings.join('; ') }}\"\n          }\n        },\n        \"options\": {}\n      },\n      \"id\": \"log-to-sheets\",\n      \"name\": \"Log to Google Sheets\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"typeVersion\": 4,\n      \"position\": [1560, 200]\n    },\n    {\n      \"parameters\": {\n        \"channel\": \"#trading-alerts\",\n        \"text\": \"🔄 *Momentum Strategy Rebalancing Alert*\\n\\n📊 *Strategy Summary:*\\n• Date: {{ $json.originalData.date }}\\n• Total Capital: ₹{{ ($json.originalData.strategy.totalCapital / 100000).toFixed(1) }}L\\n• Utilization: {{ $json.originalData.strategy.utilization.toFixed(1) }}%\\n• Avg Momentum Score: {{ $json.originalData.strategy.avgMomentumScore.toFixed(2) }}\\n\\n🔄 *Rebalancing:*\\n• Total Orders: {{ $json.originalData.rebalancing.totalOrders }}\\n• Buy Orders: {{ $json.originalData.rebalancing.buyOrders }}\\n• Sell Orders: {{ $json.originalData.rebalancing.sellOrders }}\\n• Order Value: ₹{{ ($json.originalData.rebalancing.totalOrderValue / 100000).toFixed(1) }}L\\n\\n✅ *Validation:*\\n• Market Open: {{ $json.marketOpen ? '🟢 Yes' : '🔴 No' }}\\n• Validated Orders: {{ $json.validatedOrders.length }}\\n• Rejected Orders: {{ $json.rejectedOrders.length }}\\n\\n{{ $json.warnings.length > 0 ? '⚠️ *Warnings:*\\\\n' + $json.warnings.map(w => '• ' + w).join('\\\\n') : '' }}\\n\\n🔗 <https://sheets.google.com/{{ $workflow.settings.googleSheetId }}|View Details>\",\n        \"otherOptions\": {\n          \"mrkdwn\": true\n        }\n      },\n      \"id\": \"slack-notification\",\n      \"name\": \"Send Slack Notification\",\n      \"type\": \"n8n-nodes-base.slack\",\n      \"typeVersion\": 1,\n      \"position\": [1560, 320]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\"\n          },\n          \"conditions\": [\n            {\n              \"leftValue\": \"={{ $json.validatedOrders.length }}\",\n              \"rightValue\": 0,\n              \"operator\": {\n                \"type\": \"number\",\n                \"operation\": \"gt\"\n              }\n            },\n            {\n              \"leftValue\": \"={{ $json.marketOpen }}\",\n              \"rightValue\": true,\n              \"operator\": {\n                \"type\": \"boolean\",\n                \"operation\": \"equal\"\n              }\n            }\n          ],\n          \"combinator\": \"and\"\n        }\n      },\n      \"id\": \"check-execution\",\n      \"name\": \"Check Order Execution Conditions\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2,\n      \"position\": [1560, 440]\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Split validated orders for individual execution\\nconst validatedOrders = $input.all()[0].json.validatedOrders;\\n\\n// Return each order as separate item for batch processing\\nreturn validatedOrders.map(order => ({ json: order }));\"\n      },\n      \"id\": \"split-orders\",\n      \"name\": \"Split Orders for Execution\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [1780, 440]\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Format order for broker API (Example: Zerodha Kite)\\nconst order = $json;\\n\\n// Remove .NS suffix for Indian brokers\\nconst tradingSymbol = order.ticker.replace('.NS', '');\\n\\n// Format for Kite API\\nconst kiteOrder = {\\n  tradingsymbol: tradingSymbol,\\n  exchange: 'NSE',\\n  transaction_type: order.action, // BUY or SELL\\n  quantity: order.quantity,\\n  order_type: order.orderType || 'MARKET',\\n  product: order.product || 'CNC',\\n  validity: order.validity || 'DAY',\\n  price: order.orderType === 'LIMIT' ? order.currentPrice : 0,\\n  tag: `momentum_${new Date().toISOString().split('T')[0]}`,\\n  // Additional fields for tracking\\n  momentum_score: order.momentumScore,\\n  priority: order.priority,\\n  estimated_value: order.estimatedValue\\n};\\n\\nreturn [{ json: kiteOrder }];\"\n      },\n      \"id\": \"format-broker-order\",\n      \"name\": \"Format for Broker API\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [2000, 440]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://api.kite.trade/orders/regular\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"httpMethod\": \"POST\",\n        \"sendBody\": true,\n        \"specifyBodyContentType\": true,\n        \"bodyContentType\": \"form-urlencoded\",\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"tradingsymbol\",\n              \"value\": \"={{ $json.tradingsymbol }}\"\n            },\n            {\n              \"name\": \"exchange\",\n              \"value\": \"={{ $json.exchange }}\"\n            },\n            {\n              \"name\": \"transaction_type\",\n              \"value\": \"={{ $json.transaction_type }}\"\n            },\n            {\n              \"name\": \"quantity\",\n              \"value\": \"={{ $json.quantity }}\"\n            },\n            {\n              \"name\": \"order_type\",\n              \"value\": \"={{ $json.order_type }}\"\n            },\n            {\n              \"name\": \"product\",\n              \"value\": \"={{ $json.product }}\"\n            },\n            {\n              \"name\": \"validity\",\n              \"value\": \"={{ $json.validity }}\"\n            },\n            {\n              \"name\": \"tag\",\n              \"value\": \"={{ $json.tag }}\"\n            }\n          ]\n        },\n        \"options\": {\n          \"timeout\": 10000\n        }\n      },\n      \"id\": \"execute-order\",\n      \"name\": \"Execute Order (Kite API)\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4,\n      \"position\": [2220, 440]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"appendOrUpdate\",\n        \"documentId\": \"{{ $workflow.settings.googleSheetId }}\",\n        \"sheetName\": \"Order_Execution_Log\",\n        \"columns\": {\n          \"mappingMode\": \"defineBelow\",\n          \"value\": {\n            \"Timestamp\": \"={{ $now.toISOString() }}\",\n            \"Date\": \"={{ $now.format('YYYY-MM-DD') }}\",\n            \"Ticker\": \"={{ $json.tradingsymbol }}\",\n            \"Action\": \"={{ $json.transaction_type }}\",\n            \"Quantity\": \"={{ $json.quantity }}\",\n            \"Order_Type\": \"={{ $json.order_type }}\",\n            \"Status\": \"{{ $('Execute Order (Kite API)').item.json.status || 'PENDING' }}\",\n            \"Order_ID\": \"{{ $('Execute Order (Kite API)').item.json.order_id || 'N/A' }}\",\n            \"Momentum_Score\": \"={{ $json.momentum_score }}\",\n            \"Priority\": \"={{ $json.priority }}\",\n            \"Estimated_Value\": \"={{ $json.estimated_value }}\",\n            \"Tag\": \"={{ $json.tag }}\"\n          }\n        },\n        \"options\": {}\n      },\n      \"id\": \"log-execution\",\n      \"name\": \"Log Order Execution\",\n      \"type\": \"n8n-nodes-base.googleSheets\",\n      \"typeVersion\": 4,\n      \"position\": [2440, 440]\n    },\n    {\n      \"parameters\": {\n        \"fromEmail\": \"trading@yourcompany.com\",\n        \"toEmail\": \"{{ $workflow.settings.alertEmail }}\",\n        \"subject\": \"Momentum Strategy Execution Report - {{ $now.format('YYYY-MM-DD') }}\",\n        \"html\": \"<h2>🔄 Momentum Strategy Execution Report</h2>\\n<p><strong>Date:</strong> {{ $now.format('YYYY-MM-DD HH:mm:ss') }}</p>\\n\\n<h3>📊 Strategy Summary</h3>\\n<ul>\\n  <li><strong>Total Capital:</strong> ₹{{ ($('Generate Rebalance Orders').item.json.strategy.totalCapital / 100000).toFixed(1) }}L</li>\\n  <li><strong>Utilization:</strong> {{ $('Generate Rebalance Orders').item.json.strategy.utilization.toFixed(1) }}%</li>\\n  <li><strong>Selected Stocks:</strong> {{ $('Generate Rebalance Orders').item.json.strategy.selectedStocks }}</li>\\n  <li><strong>Avg Momentum Score:</strong> {{ $('Generate Rebalance Orders').item.json.strategy.avgMomentumScore.toFixed(2) }}</li>\\n</ul>\\n\\n<h3>🔄 Execution Summary</h3>\\n<ul>\\n  <li><strong>Total Orders:</strong> {{ $('Validate Orders & Market Hours').item.json.validatedOrders.length }}</li>\\n  <li><strong>Market Status:</strong> {{ $('Validate Orders & Market Hours').item.json.marketOpen ? '🟢 Open' : '🔴 Closed' }}</li>\\n  <li><strong>Execution Status:</strong> {{ $runIndex > 0 ? 'Completed' : 'Pending' }}</li>\\n</ul>\\n\\n<h3>📋 Order Details</h3>\\n<table border='1' style='border-collapse: collapse; width: 100%;'>\\n  <tr style='background-color: #f2f2f2;'>\\n    <th>Ticker</th>\\n    <th>Action</th>\\n    <th>Quantity</th>\\n    <th>Price</th>\\n    <th>Value</th>\\n    <th>Momentum Score</th>\\n  </tr>\\n  {{ $('Validate Orders & Market Hours').item.json.validatedOrders.map(o => \\n    `<tr>\\n      <td>${o.ticker}</td>\\n      <td style='color: ${o.action === 'BUY' ? 'green' : 'red'};'>${o.action}</td>\\n      <td>${o.quantity}</td>\\n      <td>₹${o.currentPrice.toFixed(2)}</td>\\n      <td>₹${o.estimatedValue.toFixed(2)}</td>\\n      <td>${o.momentumScore.toFixed(2)}</td>\\n    </tr>`\\n  ).join('') }}\\n</table>\\n\\n<p><em>This is an automated report from the Momentum Strategy system.</em></p>\"\n      },\n      \"id\": \"email-report\",\n      \"name\": \"Send Email Report\",\n      \"type\": \"n8n-nodes-base.emailSend\",\n      \"typeVersion\": 2,\n      \"position\": [1560, 560]\n    }\n  ],\n  \"connections\": {\n    \"Weekly Schedule (Monday 9 AM)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Momentum Strategy\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Momentum Strategy\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Strategy Results\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Strategy Results\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Rebalance Orders\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Get Current Holdings\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Current Holdings\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Rebalance Orders\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Generate Rebalance Orders\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if Orders Needed\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Orders Needed\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Validate Orders & Market Hours\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Validate Orders & Market Hours\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Log to Google Sheets\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Send Slack Notification\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Check Order Execution Conditions\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Send Email Report\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Order Execution Conditions\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Split Orders for Execution\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Split Orders for Execution\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format for Broker API\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format for Broker API\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Execute Order (Kite API)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute Order (Kite API)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Log Order Execution\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\",\n    \"saveManualExecutions\": true,\n    \"callerPolicy\": \"workflowsFromSameOwner\",\n    \"errorWorkflow\": \"\"\n  },\n  \"staticData\": null,\n  \"tags\": [\"trading\", \"momentum\", \"rebalancing\"],\n  \"triggerCount\": 1,\n  \"updatedAt\": \"2024-01-01T00:00:00.000Z\",\n  \"versionId\": \"1\"\n}